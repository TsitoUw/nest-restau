// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CLIENT
  ADMIN
  
  @@map("roles")
}

model User {
  id       String  @id @default(uuid())
  username String? @unique()
  password String?
  role     Role   @default(CLIENT)

  invoices Invoice[]

  hashedRt String?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  tables    Table?    @relation(fields: [tablesId], references: [id])
  tablesId  String?

  @@index([id, username])
  @@map("users")
}

model Table {
  id    String  @id @default(uuid())
  name  String
  isVip Boolean

  users User[]
  
  @@map("tables")
}

model MenusCategory {
  id    String  @id @default(uuid())
  name  String
  menus Menus[]

  @@index([name])
  @@map("menus_categories")
}

model Menus {
  id   String @id @default(uuid())
  name String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  dishes    Dish[]

  menusCategory     MenusCategory @relation(fields: [menusCategoriesId], references: [id])
  menusCategoriesId String

  @@index([id, name])
  @@map("menus")
}

model Dish {
  id          String @id @default(uuid())
  name        String @unique
  price       Float
  description String

  menus Menus? @relation(fields: [menusId], references: [id])

  dishCategory DishCategory? @relation(fields: [dishCategoriesId], references: [id])

  ingredients Ingredient[]
  orderItems  OrderItem[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  menusId          String?
  dishCategoriesId String?

  photos DishPhoto[]

  @@index([id, name])
  @@map("dishes")
}

model DishPhoto {
  id       String @id @default(uuid())
  filename String

  dish     Dish? @relation(fields: [dishesId], references: [id])
  dishesId String?
  
  @@map("dish_photos")
}

model DishCategory {
  id     String   @id @default(uuid())
  name   String   @unique
  dishes Dish[]

  @@map("dish_categories")
}

model IngredientCategory {
  id   String @id @default(uuid())
  name String @unique

  ingredients Ingredient[]
  @@map("ingredient_categories")
}

enum IngredientUnit {
  KG
  L
  COUNT

  @@map("ingredient_units")
}

model Ingredient {
  id      String         @id @default(uuid())
  name    String         @unique
  inStock Int            @default(0)
  unit    IngredientUnit
  dishes  Dish[]

  category   IngredientCategory? @relation(fields: [categoryId], references: [id])
  categoryId String?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@index([id, name])
  @@map("ingredients")
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int

  dish     Dish @relation(fields: [dishesId], references: [id])
  dishesId String

  orders   Order? @relation(fields: [ordersId], references: [id])
  ordersId String?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("order_items")
}

model Order {
  id   String   @id @default(uuid())
  date DateTime @default(now())

  items OrderItem[]

  invoice   Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId String?

  status OrderStatus @default(PENDING)

  @@index([date])
  @@map("orders")
}

model Invoice {
  id String @id @default(uuid())

  date    DateTime @default(now())
  orders  Order[]
  users   User?   @relation(fields: [usersId], references: [id])
  usersId String?

  @@index([date])
  @@map("invoices")
}

enum OrderStatus {
  PENDING
  PROCESSING
  READY_FOR_PICKUP
  IN_DELIVERY
  DELIVERED
  CANCELLED
  REFUNDED
  COMPLETED
  ONHOLD
  IN_PROGRESS

  @@map("order_statuses")
}

// Pending: The order has been received but has not been processed yet.
// Processing: The restaurant is preparing the order.
// Ready for Pickup: The order is ready for the customer to pick up.
// In Delivery: The order is on its way to be delivered to the customer.
// Delivered: The order has been successfully delivered to the customer.
// Cancelled: The customer or the restaurant has cancelled the order.
// Refunded: The customer has been refunded for a cancelled or incorrect order.
// Completed: The order has been successfully fulfilled and completed.
// On Hold: The order is temporarily on hold due to some issues or special requests.
// In-Progress: The order is currently being prepared or cooked.
