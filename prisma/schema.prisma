// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  USER
  ADMIN
}

model Users {
  id        String    @id @default(uuid())
  name      String
  password  String?
  role      Roles @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@index([id, name])
}

model Menus {
  id        String    @id @default(uuid())
  name      String
  dishes    Dishes[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@index([id, name])
}

model Categories {
  id     String   @id @default(uuid())
  name   String
  dishes Dishes[]
}

model Dishes {
  id         String        @id @default(uuid())
  name       String
  ingedients Ingredients[]
  price      Float

  menus        Menus?      @relation(fields: [menusId], references: [id])
  menusId      String?
  categories   Categories? @relation(fields: [categoriesId], references: [id])
  categoriesId String?

  createdAt  DateTime     @default(now())
  updatedAt  DateTime?    @updatedAt
  OrderItems OrderItems[]

  @@index([id, name])
}

model Ingredients {
  id        String    @id @default(uuid())
  name      String
  dishs     Dishes[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@index([id, name])
}

model OrderItems {
  id       String @id @default(uuid())
  quantity Int

  dish     Dishes @relation(fields: [dishesId], references: [id])
  dishesId String

  orders   Orders? @relation(fields: [ordersId], references: [id])
  ordersId String?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Orders {
  id   String   @id @default(uuid())
  date DateTime @default(now())

  items OrderItems[]

  bill   Bill?   @relation(fields: [billId], references: [id])
  billId String?

  status        OrderStatuses
  orderStatusId String

  @@index([date])
}

model Bill {
  id     String   @id @default(uuid())
  date   DateTime @default(now())
  orders Orders[]

  @@index([date])
}

enum OrderStatuses {
  PENDING
  PROCESSING
  READY_FOR_PICKUP
  IN_DELIVERY
  DELIVERED
  CANCELLED
  REFUNDED
  COMPLETED
  ONHOLD
  IN_PROGRESS
}

// Pending: The order has been received but has not been processed yet.
// Processing: The restaurant is preparing the order.
// Ready for Pickup: The order is ready for the customer to pick up.
// In Delivery: The order is on its way to be delivered to the customer.
// Delivered: The order has been successfully delivered to the customer.
// Cancelled: The customer or the restaurant has cancelled the order.
// Refunded: The customer has been refunded for a cancelled or incorrect order.
// Completed: The order has been successfully fulfilled and completed.
// On Hold: The order is temporarily on hold due to some issues or special requests.
// In-Progress: The order is currently being prepared or cooked.