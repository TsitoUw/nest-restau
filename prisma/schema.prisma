// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  CLIENT
  ADMIN
}

model Users {
  id       String  @id @default(uuid())
  username String? @unique()
  password String?
  role     Roles   @default(CLIENT)

  bills Bills[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@index([id, username])
}

model Menus {
  id   String @id @default(uuid())
  name String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  Dishes    Dishes[]

  @@index([id, name])
}

model Dishes {
  id    String @id @default(uuid())
  name  String @unique
  price Float

  menus Menus? @relation(fields: [menusId], references: [id])

  dishCategory DishCategories? @relation(fields: [dishCategoriesId], references: [id])

  ingredients Ingredients[]
  orderItems  OrderItems[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  menusId          String?
  dishCategoriesId String?

  @@index([id, name])
}

model DishCategories {
  id     String   @id @default(uuid())
  name   String   @unique
  Dishes Dishes[]
}

model IngredientCategories {
  id   String @id @default(uuid())
  name String @unique

  ingredients Ingredients[]
}

model Ingredients {
  id     String   @id @default(uuid())
  name   String   @unique
  dishes Dishes[]

  category   IngredientCategories? @relation(fields: [categoryId], references: [id])
  categoryId String?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@index([id, name])
}

model OrderItems {
  id       String @id @default(uuid())
  quantity Int

  dish     Dishes @relation(fields: [dishesId], references: [id])
  dishesId String

  orders   Orders? @relation(fields: [ordersId], references: [id])
  ordersId String?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Orders {
  id   String   @id @default(uuid())
  date DateTime @default(now())

  items OrderItems[]

  bill   Bills?  @relation(fields: [billId], references: [id])
  billId String?

  status OrderStatuses @default(PENDING)

  @@index([date])
}

model Bills {
  id String @id @default(uuid())

  date   DateTime @default(now())
  orders Orders[]

  User   Users?  @relation(fields: [userId], references: [id])
  userId String?

  @@index([date])
}

enum OrderStatuses {
  PENDING
  PROCESSING
  READY_FOR_PICKUP
  IN_DELIVERY
  DELIVERED
  CANCELLED
  REFUNDED
  COMPLETED
  ONHOLD
  IN_PROGRESS
}

// Pending: The order has been received but has not been processed yet.
// Processing: The restaurant is preparing the order.
// Ready for Pickup: The order is ready for the customer to pick up.
// In Delivery: The order is on its way to be delivered to the customer.
// Delivered: The order has been successfully delivered to the customer.
// Cancelled: The customer or the restaurant has cancelled the order.
// Refunded: The customer has been refunded for a cancelled or incorrect order.
// Completed: The order has been successfully fulfilled and completed.
// On Hold: The order is temporarily on hold due to some issues or special requests.
// In-Progress: The order is currently being prepared or cooked.
